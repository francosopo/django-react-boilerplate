name: main
on: [push, pull_request]

jobs:
  build:
<<<<<<< HEAD
    name: Build explora_uchile_backend
=======
    name: Build {{project_name}}
>>>>>>> 37cb4d29a35886fe431d5797246534db912e0cc2
    strategy:
      matrix:
        python: [3.12]
        node: [20.13]
    env:
      DATABASE_URL: "sqlite:///"
      REDIS_URL: "redis://"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Store branch and latest SHA
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        id: git
<<<<<<< HEAD
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
=======
      - name: Setup Python ${% templatetag openvariable %} matrix.python {% templatetag closevariable %}
        uses: actions/setup-python@v5
        with:
          python-version: ${% templatetag openvariable %} matrix.python {% templatetag closevariable %}
      - name: Setup Node ${% templatetag openvariable %} matrix.node {% templatetag closevariable %}
        uses: actions/setup-node@v4
        with:
          node-version: ${% templatetag openvariable %} matrix.node {% templatetag closevariable %}
>>>>>>> 37cb4d29a35886fe431d5797246534db912e0cc2
      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache_name: node-modules-cache
        with:
          path: ~/.npm
<<<<<<< HEAD
          key: build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
          restore-keys: |
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}
            build-${{ env.cache_name }}
=======
          key: build-${% templatetag openvariable%} env.cache_name {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.branch {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.sha_short {% templatetag closevariable %}
          restore-keys: |
            build-${% templatetag openvariable%} env.cache_name {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.branch {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.sha_short {% templatetag closevariable %}
            build-${% templatetag openvariable%} env.cache_name {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.branch {% templatetag closevariable %}
            build-${% templatetag openvariable%} env.cache_name {% templatetag closevariable %}
>>>>>>> 37cb4d29a35886fe431d5797246534db912e0cc2
      - name: Cache pip
        uses: actions/cache@v4
        env:
          cache_name: pip-cache
        with:
          path: ~/.cache/pip
<<<<<<< HEAD
          key: build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
          restore-keys: |
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}
            build-${{ env.cache_name }}
=======
          key: build-${% templatetag openvariable%} env.cache_name {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.branch {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.sha_short {% templatetag closevariable %}
          restore-keys: |
            build-${% templatetag openvariable%} env.cache_name {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.branch {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.sha_short {% templatetag closevariable %}
            build-${% templatetag openvariable%} env.cache_name {% templatetag closevariable %}-${% templatetag openvariable%} steps.git.outputs.branch {% templatetag closevariable %}
            build-${% templatetag openvariable%} env.cache_name {% templatetag closevariable %}
>>>>>>> 37cb4d29a35886fe431d5797246534db912e0cc2
      - run: python -m pip install --upgrade pip
      - run: python -m pip install poetry==1.7.1
      - run: curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
      - run: sudo apt-get install git-lfs --upgrade
      - run: poetry install --with dev --no-root --no-interaction --no-ansi
      - run: npm install
      - run: npm run build
      - run: npm run lint
      - name: Generate secret key
        run: echo '::set-output name=SECRET_KEY::`python -c "import uuid; print(uuid.uuid4().hex + uuid.uuid4().hex)"`'
        id: secret_id_generator
      - name: Linting
        run: poetry run ruff check ./backend/
        env:
<<<<<<< HEAD
          DJANGO_SETTINGS_MODULE: "explora_uchile_backend.settings.local_base"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
=======
          DJANGO_SETTINGS_MODULE: "{{project_name}}.settings.local_base"
          SECRET_KEY: ${% templatetag openvariable %} steps.secret_id_generator.outputs.SECRET_KEY {% templatetag closevariable %}
>>>>>>> 37cb4d29a35886fe431d5797246534db912e0cc2
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
      - run: poetry run pre-commit run --all-files
        env:
          SKIP: ruff,eslint,missing-migrations,backend-schema
      - run: poetry run python manage.py makemigrations --check --dry-run
        env:
<<<<<<< HEAD
          DJANGO_SETTINGS_MODULE: "explora_uchile_backend.settings.production"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
=======
          DJANGO_SETTINGS_MODULE: "{{project_name}}.settings.production"
          SECRET_KEY: ${% templatetag openvariable %} steps.secret_id_generator.outputs.SECRET_KEY {% templatetag closevariable %}
>>>>>>> 37cb4d29a35886fe431d5797246534db912e0cc2
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
        working-directory: backend
      - run: poetry run python manage.py check --deploy
        env:
<<<<<<< HEAD
          DJANGO_SETTINGS_MODULE: "explora_uchile_backend.settings.production"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
=======
          DJANGO_SETTINGS_MODULE: "{{project_name}}.settings.production"
          SECRET_KEY: ${% templatetag openvariable %} steps.secret_id_generator.outputs.SECRET_KEY {% templatetag closevariable %}
>>>>>>> 37cb4d29a35886fe431d5797246534db912e0cc2
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
        working-directory: backend
      - run: |
          poetry run coverage run manage.py test
          mkdir -p junit
          poetry run coverage xml -o junit/test-results.xml
        working-directory: backend
      - run: npm run test
